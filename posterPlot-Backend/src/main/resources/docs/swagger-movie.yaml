openapi: 3.0.1
info:
  title: PosterPlot API
  description: AI 기반 줄거리 생성과 유저 작성 시나리오를 바탕으로, 유사 영화 추천 및 시나리오 열람 기능을 제공하는 웹 플랫폼 프로젝트 API
  version: v1.0
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - JWT: []
tags:
  - name: AuthController
    description: AuthController API 목록
paths:
  /movie/upload:
    post:
      tags:
        - movie-controller
      summary: 영화 포스터 업로드
      description: 사용자가 2개의 영화 포스터 이미지를 업로드하면, 이미지가 서버에 저장됩니다.
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - files
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: 이미지가 성공적으로 업로드되었습니다.
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: 파일은 반드시 2개를 업로드 해야 합니다.
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: 로그인 유저가 아닙니다.
          content:
            '*/*':
              schema:
                type: string
  /movie/getStory:
    post:
      tags:
        - movie-controller
      summary: 영화 줄거리 생성 요청
      description: Flask 서버로 movieListId를 전달하여 AI 기반 영화 줄거리를 생성합니다.
      operationId: sendToFlask
      parameters:
        - name: movieListId
          in: query
          description: 업로드된 영화 포스터에 해당하는 ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 영화 줄거리가 성공적으로 생성되었습니다.
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: 올바르지 않은 요청입니다. movieListId가 유효하지 않거나 데이터가 없습니다.
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: 로그인이 필요합니다.
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: Flask API 호출 중 서버 오류가 발생했습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/signUp:
    post:
      tags:
        - AuthController
      summary: 회원가입
      description: 새로운 회원을 등록합니다.
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequestDto'
        required: true
      responses:
        '200':
          description: 회원가입 성공
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/mailSend:
    post:
      tags:
        - AuthController
      summary: 이메일 인증 보내기
      description: 이메일로 인증 번호를 발송합니다.
      operationId: mailSend
      parameters:
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            type: string
          example: user123@gmail.com
      responses:
        '200':
          description: 이메일로 인증 번호가 전송되었습니다.
          content:
            '*/*':
              schema:
                type: string
        '409':
          description: 이미 사용 중인 이메일입니다.
          content:
            '*/*':
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/login:
    post:
      tags:
        - AuthController
      summary: 로그인
      description: 사용자 로그인을 처리합니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
        required: true
      responses:
        '200':
          description: 로그인이 성공하여 jwt 토큰을 출력합니다.
          content:
            '*/*':
              schema:
                type: string
        '401':
          description: 아이디 또는 비밀번호가 옳지 않습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/mailAuthCheck:
    get:
      tags:
        - AuthController
      summary: 이메일 인증 확인
      description: 인증 번호가 일치하는지 확인합니다.
      operationId: AuthCheck
      parameters:
        - name: emailCheckDto
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EmailCheckDto'
      responses:
        '200':
          description: 인증 번호가 일치합니다.
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: 인증 번호가 일치하지 않습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/checkPassword:
    get:
      tags:
        - AuthController
      summary: 비밀번호 확인
      description: 비밀번호와 비밀번호 확인이 일치하는지 확인합니다.
      operationId: checkPassword
      parameters:
        - name: password
          in: query
          description: 비밀번호
          required: true
          schema:
            type: string
          example: password123
        - name: confirmPassword
          in: query
          description: 비밀번호 확인
          required: true
          schema:
            type: string
          example: password123
      responses:
        '200':
          description: 사용 가능한 비밀번호입니다.
          content:
            '*/*':
              schema:
                type: string
        '400':
          description: 비밀번호가 일치하지 않습니다.
          content:
            '*/*':
              schema:
                type: string
  /auth/checkId:
    get:
      tags:
        - AuthController
      summary: 아이디 중복 확인
      description: 아이디가 이미 존재하는지 확인합니다.
      operationId: checkId
      parameters:
        - name: id
          in: query
          description: 확인할 아이디
          required: true
          schema:
            type: string
          example: user123
      responses:
        '200':
          description: 사용 가능한 아이디입니다.
          content:
            '*/*':
              schema:
                type: string
        '409':
          description: 아이디가 이미 존재합니다.
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    SignUpRequestDto:
      required:
        - email
        - id
        - password
      type: object
      properties:
        id:
          type: string
          example: user123
        password:
          maxLength: 15
          minLength: 8
          type: string
          example: password123
        email:
          type: string
          example: user123@gmail.com
    LoginRequestDto:
      type: object
      properties:
        id:
          type: string
          example: user123
        password:
          type: string
          example: password123
    EmailCheckDto:
      required:
        - authNum
        - email
      type: object
      properties:
        email:
          type: string
          example: user123@gmail.com
        authNum:
          type: string
          example: '123456'
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
