---
openapi: 3.0.1
info:
  title: PosterPlot API
  description: AI 기반 줄거리 생성과 유저 작성 시나리오를 바탕으로, 유사 영화 추천 및 시나리오 열람 기능을 제공하는 웹 플랫폼 프로젝트
    API
  version: v1.0
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - JWT: []
tags:
  - name: AuthController
    description: AuthController API 목록
  - name: CommentController
    description: CommentController API 목록
paths:
  "/posts/like":
    post:
      tags:
        - post-controller
      summary: 게시물 좋아요
      description: 게시글에 좋아요를 누릅니다.
      operationId: likePost
      parameters:
        - name: postId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 좋아요 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 이미 좋아요를 누르셨습니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/posts/create":
    post:
      tags:
        - post-controller
      summary: 게시글 작성
      description: 유저가 새로운 게시글을 작성합니다.
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PostRequestDto"
        required: true
      responses:
        '200':
          description: 게시글이 성공적으로 작성되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 요청 데이터가 유효하지 않습니다.
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인 유저가 아닙니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/movie/upload":
    post:
      tags:
        - movie-controller
      summary: 영화 포스터 업로드
      description: 사용자가 2개의 영화 포스터 이미지를 업로드하면, 이미지가 서버에 저장됩니다.
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - files
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: 이미지가 성공적으로 업로드되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 파일은 반드시 2개를 업로드 해야 합니다.
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인 유저가 아닙니다.
          content:
            "*/*":
              schema:
                type: string
  "/movie/getStory":
    post:
      tags:
        - movie-controller
      summary: 영화 줄거리 생성 요청
      description: Flask 서버로 movieListId를 전달하여 AI 기반 영화 줄거리를 생성합니다.
      operationId: sendToFlask
      parameters:
        - name: movieListId
          in: query
          description: 업로드된 영화 포스터에 해당하는 ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 영화 줄거리가 성공적으로 생성되었습니다. aiStoryId 반환
          content:
            "*/*":
              schema:
                type: object
        '400':
          description: 올바르지 않은 요청입니다. movieListId가 유효하지 않거나 데이터가 없습니다.
          content:
            "*/*":
              schema:
                type: object
        '401':
          description: 로그인이 필요합니다.
          content:
            "*/*":
              schema:
                type: object
        '500':
          description: Flask API 호출 중 서버 오류가 발생했습니다.
          content:
            "*/*":
              schema:
                type: object
  "/comment/create":
    post:
      tags:
        - CommentController
      summary: 댓글 작성
      description: 로그인된 사용자가 특정 게시글에 댓글을 작성합니다.
      operationId: createComment
      parameters:
        - name: content
          in: query
          required: true
          schema:
            type: string
        - name: postId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 댓글이 성공적으로 작성되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 로그인하지 않은 사용자입니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/auth/signUp":
    post:
      tags:
        - AuthController
      summary: 회원가입
      description: 새로운 회원을 등록합니다.
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SignUpRequestDto"
        required: true
      responses:
        '200':
          description: 회원가입 성공
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/auth/mailSend":
    post:
      tags:
        - AuthController
      summary: 이메일 인증 보내기
      description: 이메일로 인증 번호를 발송합니다.
      operationId: mailSend
      parameters:
        - name: email
          in: query
          description: 이메일
          required: true
          schema:
            type: string
          example: user123@gmail.com
      responses:
        '200':
          description: 이메일로 인증 번호가 전송되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '409':
          description: 이미 사용 중인 이메일입니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/auth/mailAuthCheck":
    post:
      tags:
        - AuthController
      summary: 이메일 인증 확인
      description: 인증 번호가 일치하는지 확인합니다.
      operationId: AuthCheck
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmailCheckDto"
        required: true
      responses:
        '200':
          description: 인증 번호가 일치합니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 인증 번호가 일치하지 않습니다.
          content:
            "*/*":
              schema:
                type: string
  "/auth/login":
    post:
      tags:
        - AuthController
      summary: 로그인
      description: 사용자 로그인을 처리합니다.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequestDto"
        required: true
      responses:
        '200':
          description: 로그인이 성공하여 jwt 토큰을 출력합니다.
          content:
            "*/*":
              schema:
                type: string
        '401':
          description: 아이디 또는 비밀번호가 옳지 않습니다.
          content:
            "*/*":
              schema:
                type: string
  "/posts/view":
    get:
      tags:
        - post-controller
      summary: 게시물 띄우기
      description: 게시물 목록에서 게시글 클릭시 게시물을 보여줍니다.
      operationId: getPost
      parameters:
        - name: postId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 게시글 반환 성공
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PostResponseDto"
        '404':
          description: 게시글을 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PostResponseDto"
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PostResponseDto"
  "/posts/moviePosters":
    get:
      tags:
        - post-controller
      summary: 사용자의 AI Story 기반 영화 포스터 목록 조회
      description: 현재 로그인한 사용자의 AI Story와 관련된 영화 포스터 목록을 반환합니다.
      operationId: getMoviePosters
      parameters:
        - name: aiStoryId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 영화 포스터 목록 반환 성공
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
        '400':
          description: 영화 포스터를 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  type: string
  "/posts/list":
    get:
      tags:
        - post-controller
      summary: 게시물 목록 띄우기
      description: '게시물 목록을 요청된 정렬 기준에 따라 반환합니다. 가능한 정렬 기준: ''latest'' (최신순), ''oldest''
        (오래된순), ''likes'' (좋아요순), ''top_likes'' (좋아요 상위 3개)'
      operationId: getPosts
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 게시글 목록 반환 성공
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '400':
          description: 잘못된 요청 타입입니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '500':
          description: 서버 내부 오류 발생
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
  "/posts/list/{genre}":
    get:
      tags:
        - post-controller
      summary: 장르별 게시글 조회
      description: '입력된 장르에 해당하는 게시글 목록을 반환합니다. 예시: ''ACTION'', ''COMEDY'', ''DRAMA'',
        ''SCIFI'' 등'
      operationId: getGenrePosts
      parameters:
        - name: genre
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACTION
              - CRIME
              - ROMANCE
              - SCI_FI
              - COMEDY
              - SPORTS
              - FANTASY
              - MUSIC
              - MUSICAL
              - WAR
              - HORROR
              - THRILLER
      responses:
        '200':
          description: 게시글 목록 반환 성공
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '400':
          description: 잘못된 장르 값입니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '500':
          description: 서버 내부 오류 발생
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
  "/posts/list/my":
    get:
      tags:
        - post-controller
      summary: 유저별 게시글 조회
      description: 현재 로그인한 유저의 게시글 목록을 반환합니다.
      operationId: getUserPosts
      responses:
        '200':
          description: 게시글 목록 반환 성공
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '401':
          description: 로그인이 필요합니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
        '500':
          description: 서버 내부 오류 발생
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PostListResponseDto"
  "/posts/aiStory":
    get:
      tags:
        - post-controller
      summary: 사용자의 AI Story 조회
      description: 현재 로그인한 사용자의 AI Story를 조회하여 반환합니다.
      operationId: getAiStory
      parameters:
        - name: aiStoryId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: AI Story 반환 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: Ai Story를 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/movie/aiStory":
    get:
      tags:
        - movie-controller
      summary: 사용자의 AI Story 조회
      description: 현재 로그인한 사용자의 AI Story를 조회하여 반환합니다.
      operationId: getAiStory_1
      parameters:
        - name: aiStoryId
          in: query
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: AI Story 반환 성공
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: Ai Story를 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/comment/list/{postId}":
    get:
      tags:
        - CommentController
      summary: 댓글 목록 조회
      description: 특정 게시글에 대한 모든 댓글을 조회합니다.
      operationId: getCommentList
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 댓글 목록을 반환합니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentListResponseDto"
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/CommentListResponseDto"
  "/auth/checkPassword":
    get:
      tags:
        - AuthController
      summary: 비밀번호 확인
      description: 비밀번호와 비밀번호 확인이 일치하는지 확인합니다.
      operationId: checkPassword
      parameters:
        - name: password
          in: query
          description: 비밀번호
          required: true
          schema:
            type: string
          example: password123
        - name: confirmPassword
          in: query
          description: 비밀번호 확인
          required: true
          schema:
            type: string
          example: password123
      responses:
        '200':
          description: 사용 가능한 비밀번호입니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 비밀번호가 일치하지 않습니다.
          content:
            "*/*":
              schema:
                type: string
  "/auth/checkId":
    get:
      tags:
        - AuthController
      summary: 아이디 중복 확인
      description: 아이디가 이미 존재하는지 확인합니다.
      operationId: checkId
      parameters:
        - name: id
          in: query
          description: 확인할 아이디
          required: true
          schema:
            type: string
          example: user123
      responses:
        '200':
          description: 사용 가능한 아이디입니다.
          content:
            "*/*":
              schema:
                type: string
        '409':
          description: 아이디가 이미 존재합니다.
          content:
            "*/*":
              schema:
                type: string
  "/posts/delete/{postId}":
    delete:
      tags:
        - post-controller
      summary: 게시물 삭제
      description: 게시물을 삭제합니다.
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 게시글이 성공적으로 삭제되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 해당 게시글을 찾을 수 없거나 삭제 권한이 없습니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
  "/comment/delete/{commentId}":
    delete:
      tags:
        - CommentController
      summary: 댓글 삭제
      description: 로그인된 사용자가 자신의 댓글을 삭제합니다.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 댓글이 성공적으로 삭제되었습니다.
          content:
            "*/*":
              schema:
                type: string
        '400':
          description: 해당 댓글을 찾을 수 없습니다.
          content:
            "*/*":
              schema:
                type: string
        '403':
          description: 댓글 삭제 권한이 없습니다.
          content:
            "*/*":
              schema:
                type: string
        '500':
          description: 서버 에러가 발생했습니다.
          content:
            "*/*":
              schema:
                type: string
components:
  schemas:
    PostRequestDto:
      required:
        - content
        - genre
        - title
      type: object
      properties:
        title:
          type: string
          example: 시나리오 제목
        content:
          type: string
          example: 시나리오 이야기
        genre:
          type: string
          example: ACTION
          enum:
            - ACTION
            - CRIME
            - ROMANCE
            - SCI_FI
            - COMEDY
            - SPORTS
            - FANTASY
            - MUSIC
            - MUSICAL
            - WAR
            - HORROR
            - THRILLER
            - ACTION
            - CRIME
            - ROMANCE
            - SCI_FI
            - COMEDY
            - SPORTS
            - FANTASY
            - MUSIC
            - MUSICAL
            - WAR
            - HORROR
            - THRILLER
        aiStoryId:
          type: integer
          description: AI 스토리 ID (없을 경우 null 가능)
          format: int32
          nullable: true
          example: 1
    SignUpRequestDto:
      required:
        - email
        - id
        - password
      type: object
      properties:
        id:
          type: string
          example: user123
        password:
          maxLength: 15
          minLength: 8
          type: string
          example: password123
        email:
          type: string
          example: user123@gmail.com
    EmailCheckDto:
      required:
        - authNum
        - email
      type: object
      properties:
        email:
          type: string
          example: user123@gmail.com
        authNum:
          type: string
          example: '123456'
    LoginRequestDto:
      type: object
      properties:
        id:
          type: string
          example: user123
        password:
          type: string
          example: password123
    PostResponseDto:
      type: object
      properties:
        postId:
          type: integer
          format: int32
        id:
          type: string
        title:
          type: string
        content:
          type: string
        totalLikes:
          type: integer
          format: int32
        genre:
          type: string
          enum:
            - ACTION
            - CRIME
            - ROMANCE
            - SCI_FI
            - COMEDY
            - SPORTS
            - FANTASY
            - MUSIC
            - MUSICAL
            - WAR
            - HORROR
            - THRILLER
        aiStory:
          type: string
        movie1stPath:
          type: string
        movie2ndPath:
          type: string
    PostListResponseDto:
      type: object
      properties:
        postId:
          type: integer
          format: int32
          example: 123
        title:
          type: string
          example: title
        id:
          type: string
          example: user123
    CommentListResponseDto:
      type: object
      properties:
        commentId:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        content:
          type: string
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
